THESE ARE THE PROCEDURES THAT MUST BE CHANGED
JUST COPY AND PASTE
@DATA SEG
  GAMEOVER DB 'over.txt', 00H
  LEFT_ARROW DB 4BH
  RIGHT_ARROW DB 4DH
PLEASE CHECK THIS PART HERE KUNG SAKTO BA
  ARROW_POS_START DW 0E1EH
  ARROW_POS_HOW DW 101CH
  ARROW_POS_EXIT DW 121EH
  ARROW_POS DW ?
  HOW_BACK DW 1612H
  HOW_START DW 162FH
  GAME_AGAIN DW 170EH
  GAME_EXIT DW 1737H
  ;--------------------------------------------------
  HOW_INST PROC NEAR
    CALL INITIAL_CURSOR
    CALL _CLEAR_SCREEN
    MOV DX, OFFSET HOWSCREEN
    PUSH DX
    CALL OPEN_FILE

    MOV AX, HOW_BACK
    MOV ARROW_POS, AX
    CHOOSE:
      MOV DX, ARROW_POS
      PUSH DX
      CALL SET_CURSOR

      MOV AL, 02H
      MOV DL, ARROW
      INT 21H

      CALL GET_KEY
      MOV AL, INPUT

      CMP AL, LEFT_ARROW
      JE LEFT_INST

      CMP AL, RIGHT_ARROW
      JE RIGHT_INST

      CMP AL, ENTER_KEY
      JE CHECK_INST2

      CHECK_INST2:
        MOV AX, HOW_BACK
        CMP ARROW_POS, AX
        JE EXTRA_JMP
  			;PLEASE CHANGE THIS PART HERE TOO
  			MOV AX, HOW_START
  			CMP ARROW_POS, AX
  			JE GAME_OVER_EX

        JMP CHOOSE
      LEFT_INST:
  			CALL _CLEAR
  			MOV AX, HOW_BACK
  			MOV ARROW_POS, AX
  			JMP CHOOSE

  		RIGHT_INST:
  			CALL _CLEAR
  			MOV AX, HOW_START
  			MOV ARROW_POS, AX
  			JMP CHOOSE

  HOW_INST ENDP
;---------------------------------------------------

GAME_OVER_EX PROC NEAR
	CALL INITIAL_CURSOR
	CALL _CLEAR_SCREEN
	MOV DX, OFFSET GAMEOVER
	PUSH DX
	CALL OPEN_FILE

	MOV AX, GAME_AGAIN
	MOV ARROW_POS, AX
	CHOOSE_GAME_OVER:
		MOV DX, ARROW_POS
		PUSH DX

		CALL SET_CURSOR
		MOV AL, 02H
		MOV DL, ARROW
		INT 21H

		CALL GET_KEY
		MOV AL, INPUT

		CMP AL, LEFT_ARROW
		JE LEFT_INST_GAME_OVER

		CMP AL, RIGHT_ARROW
		JE RIGHT_INST_GAME_OVER

		CMP AL, ENTER
		JE CHECK_INST3

		CHECK_INST3:
			MOV AX, GAME_EXIT
			CMP ARROW_POS, AX
			JE NEW_EXIT_OVER
			;PLEASE CHANGE THIS PART
			MOV AX, GAME_START
			CMP ARROW_POS, AX
			JE NEW_EXIT_OVER

		NEW_EXIT_OVER:
			MOV AH, 4CH
			INT 21H

		JMP CHOOSE_GAME_OVER

		LEFT_INST_GAME_OVER:
			CALL _CLEAR
			MOV AX, GAME_AGAIN
			MOV ARROW_POS, AX
			JMP CHOOSE_GAME_OVER

		RIGHT_INST_GAME_OVER:
			CALL _CLEAR
			MOV AX, GAME_EXIT
			MOV ARROW_POS, AX
			JMP CHOOSE_GAME_OVER

GAME_OVER_EX ENDP
;----------------------------------------------------
CHOOSE_MENU PROC NEAR
  CALL INITIAL_CURSOR
  CALL _CLEAR_SCREEN

  MOV DX, OFFSET STARTSCREEN
  PUSH DX
  CALL OPEN_FILE

  MOV AX, ARROW_POS_START
  MOV ARROW_POS, AX
  CHOOSING:
    MOV AX, 0
    MOV BX, 0
    MOV CX, 0
    MOV DX, 0
    MOV DX, ARROW_POS
    PUSH DX
    CALL SET_CURSOR

    MOV AL, 02H
    MOV DL, ARROW
    INT 21H

    GETTING_INP:
      MOV AH, 0
      CALL GET_KEY
      MOV AL, INPUT

      CMP AL, DOWN_ARROW
      JE DOWN_MKEY

      CMP AL, UP_ARROW
      JE UP_MKEY

      CMP AL, ENTER_KEY
      JE CHECK_INST

      JMP GETTING_INP

    GOTO_START:						; LONG RANGE JUMP TO START PUZZLE
   	  JMP START_PUZZLE_LOOPING

    CHECK_INST:
      MOV BX, ARROW_POS_START
      CMP ARROW_POS, BX
      JE GOTO_START

      MOV BX, ARROW_POS_EXIT
      CMP ARROW_POS, BX
      JE NEW_EXIT

      MOV BX, ARROW_POS_HOW
      CMP ARROW_POS, BX
      JE HOW_INST

      NEW_EXIT:
        MOV AH, 4CH
        INT 21H
    DOWN_MKEY:
      MOV AX, ARROW_POS_START
      CMP ARROW_POS, AX ;OFFSET ARROW_POS_START
      JE DOWN_HOW
      MOV AX, ARROW_POS_HOW
      CMP ARROW_POS, AX ;OFFSET ARROW_POS_HOW
      JE DOWN_EXIT
      JMP GETTING_INP

      DOWN_HOW:
        CALL _CLEAR
        MOV AX, ARROW_POS_HOW
        MOV ARROW_POS, AX
        JMP CHOOSING
      DOWN_EXIT:
        CALL _CLEAR
        MOV AX, ARROW_POS_EXIT
        MOV ARROW_POS, AX
        JMP CHOOSING
    UP_MKEY:
      MOV AX, ARROW_POS_EXIT
      CMP ARROW_POS, ax ;OFFSET ARROW_POS_EXIT
      JE UP_HOW
      MOV AX, ARROW_POS_HOW
      CMP ARROW_POS, AX ;OFFSET ARROW_POS_HOW
      JE UP_START
      JMP GETTING_INP

      UP_HOW:
        CALL _CLEAR
        MOV AX, ARROW_POS_HOW
        MOV ARROW_POS, AX
        JMP CHOOSING

      UP_START:
        CALL _CLEAR
        MOV AX, ARROW_POS_START
        MOV ARROW_POS, AX
        JMP CHOOSING

  EXTRA_JMP:
    JMP CHOOSE_MENU
CHOOSE_MENU ENDP
;--------------------------------------------------
_CLEAR PROC NEAR 					;CLEARS THE ARROW
  MOV AX, 0600H
  MOV BH, 04H
  MOV CX, ARROW_POS
  MOV DX, ARROW_POS
  INT 10H
  RET
_CLEAR ENDP
;---------------------------------------------------
_CLEAR_SCREEN PROC	NEAR
    MOV		AX, 0600H
    MOV		BH, 04H
    MOV 	CX, 0000H
    MOV		DX, 184FH
    INT		10H
    RET
_CLEAR_SCREEN ENDP
;---------------------------------------------------
;---------------------------------------------------
